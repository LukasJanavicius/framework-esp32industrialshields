#include "Semaphore.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
Semaphore::Semaphore() : semaphore(nullptr) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Semaphore::~Semaphore() {
	vSemaphoreDelete(semaphore);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool Semaphore::isTaken() const {
	return uxSemaphoreGetCount(semaphore) > 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool Semaphore::take(uint32_t timeout) const {
	bool status;
	if (timeout > 0) {
		TickType_t ticks = timeout / portTICK_RATE_MS;
		status = (xSemaphoreTake(semaphore, ticks) == pdTRUE);

	} else {
		status = (xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE);
	}

	return status;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Semaphore::give() const {
	xSemaphoreGive(semaphore);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
SemaphoreBinary::SemaphoreBinary(bool given) {
	semaphore = xSemaphoreCreateBinary();
	if (semaphore == nullptr) {
		while (true);
	}

	if (given) {
		give();
	}
}
